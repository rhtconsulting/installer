package offline

import (

        "fmt"
	"os"
	"github.com/ghodss/yaml"
	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/types"

)

const (
	offlineConfigFilename = "offline-config.yaml"
)

type OfflinePackage struct {
        File   *asset.File          `json:"file"`
	url    string              
}

var _ asset.WritableAsset = (*OfflinePackage)(nil)


// Files returns the files generated by the asset.
func (a *OfflinePackage) Files() []*asset.File {
        if a.File != nil {
                return []*asset.File{a.File}
        }
        return []*asset.File{}
}

// Load returns the installconfig from disk.
func (a *OfflinePackage) Load(f asset.FileFetcher) (found bool, err error) {

	file, err := f.FetchByName(offlineConfigFilename)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, err
	}

	config := &types.OfflineConfig{}
	if err := yaml.Unmarshal(file.Data, config); err != nil {
		return false, err
	}

	fmt.Printf("Downloading RHCOS for architecture [%v]\n", config.Rhcos.Architecture)


	rhcosMeta := &rhcosReleaseMetaData{}
	mirrorRelease := &mirrorReleaseMetaData{}
	isoImage      := &isoImageMetaData{}
	

	rhcosMeta.createOfflinePackage(config.Rhcos.Url, config.Ocpdistribution.Destdir)
	mirrorRelease.pullMirrorImages(config)
	mirrorRelease.extractInstaller(config)
	isoImage.createISOImage(config.Ocpdistribution.Destdir, config.Ocpdistribution.Isofile)

	return true, nil
}

func (a *OfflinePackage) Generate(parents asset.Parents) error {
        rhcosRelease := &rhcosReleaseMetaData{}

        fmt.Println("Offline Generate is being called")
	parents.Get(
		rhcosRelease,
	)
	//rhcosMetaData = &rhcosReleaseMetaData{}

	rhcosRelease.Generate(parents)

        return nil
}

// Dependencies returns no dependencies.
func (a *OfflinePackage) Dependencies() []asset.Asset {
	return []asset.Asset{
		&rhcosReleaseMetaData{},
		&mirrorReleaseMetaData{},
	}
}

// Name returns the human-friendly name of the asset.
func (a *OfflinePackage) Name() string {
	return "Offline Package"
}
