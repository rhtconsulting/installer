package offline

import (

        "fmt"
	"github.com/openshift/installer/pkg/asset"

)

const (
	offlineConfigFilename = "offline-config.yaml"
)

type OfflinePackage struct {
        File   *asset.File          `json:"file"`
	url    string               `json:"baseUrl"`
}

var _ asset.WritableAsset = (*OfflinePackage)(nil)

// Files returns the files generated by the asset.
func (a *OfflinePackage) Files() []*asset.File {
        fmt.Println("Offline Files is being called")
        if a.File != nil {
                return []*asset.File{a.File}
        }
        return []*asset.File{}
}

// Load returns the installconfig from disk.
func (a *OfflinePackage) Load(f asset.FileFetcher) (found bool, err error) {
        fmt.Println("Offline Load is being called")
	rhcosMeta := &rhcosReleaseMetaData{}

	rhcosMeta.CreateOfflinePackage("http://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/latest/latest/rhcos-4.4.3-x86_64-aws.x86_64.vmdk.gz")
	
	return true, nil
}

func (a *OfflinePackage) Generate(parents asset.Parents) error {
        rhcosRelease := &rhcosReleaseMetaData{}
        fmt.Println("Offline Generate is being called")
	parents.Get(
		rhcosRelease,
	)
	//rhcosMetaData = &rhcosReleaseMetaData{}

	rhcosRelease.Generate(parents)

        return nil
}

// Dependencies returns no dependencies.
func (a *OfflinePackage) Dependencies() []asset.Asset {
        fmt.Println("Offline Dependencies is being called")
	return []asset.Asset{
		&rhcosReleaseMetaData{},
	}
}

// Name returns the human-friendly name of the asset.
func (a *OfflinePackage) Name() string {
        fmt.Println("Offline Name is being called")
	return "Offline Package"
}
